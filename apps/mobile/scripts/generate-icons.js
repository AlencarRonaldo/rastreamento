/**
 * Script to generate app icons in different sizes
 * Run: node scripts/generate-icons.js
 */

const fs = require('fs');
const path = require('path');

// Define icon sizes needed
const iconSizes = {
  // iOS sizes
  'icon-16.png': 16,
  'icon-20.png': 20,
  'icon-29.png': 29,
  'icon-40.png': 40,
  'icon-50.png': 50,
  'icon-57.png': 57,
  'icon-58.png': 58,
  'icon-60.png': 60,
  'icon-72.png': 72,
  'icon-76.png': 76,
  'icon-80.png': 80,
  'icon-87.png': 87,
  'icon-100.png': 100,
  'icon-114.png': 114,
  'icon-120.png': 120,
  'icon-144.png': 144,
  'icon-152.png': 152,
  'icon-167.png': 167,
  'icon-180.png': 180,
  'icon-1024.png': 1024,
  
  // Android sizes
  'icon-36.png': 36,
  'icon-48.png': 48,
  'icon-96.png': 96,
  'icon-192.png': 192,
  'icon-512.png': 512,
  
  // Main icons
  'icon.png': 1024,
  'adaptive-icon.png': 1024,
  'notification-icon.png': 96,
  'splash.png': 1242, // iPhone X splash width
};

// Create a simple SVG template for the app icon
const createVehicleIconSVG = (size) => `
<svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#2563eb;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1e40af;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <!-- Background circle -->
  <circle cx="${size/2}" cy="${size/2}" r="${size/2}" fill="url(#bg)"/>
  
  <!-- Vehicle body -->
  <rect x="${size*0.2}" y="${size*0.35}" width="${size*0.6}" height="${size*0.2}" rx="${size*0.05}" fill="white"/>
  <rect x="${size*0.25}" y="${size*0.3}" width="${size*0.5}" height="${size*0.15}" rx="${size*0.03}" fill="white"/>
  
  <!-- Wheels -->
  <circle cx="${size*0.3}" cy="${size*0.65}" r="${size*0.08}" fill="white"/>
  <circle cx="${size*0.7}" cy="${size*0.65}" r="${size*0.08}" fill="white"/>
  <circle cx="${size*0.3}" cy="${size*0.65}" r="${size*0.05}" fill="#374151"/>
  <circle cx="${size*0.7}" cy="${size*0.65}" r="${size*0.05}" fill="#374151"/>
  
  <!-- GPS signal waves -->
  <circle cx="${size*0.5}" cy="${size*0.25}" r="${size*0.02}" fill="white"/>
  <circle cx="${size*0.5}" cy="${size*0.25}" r="${size*0.05}" fill="none" stroke="white" stroke-width="${size*0.01}" opacity="0.6"/>
  <circle cx="${size*0.5}" cy="${size*0.25}" r="${size*0.08}" fill="none" stroke="white" stroke-width="${size*0.01}" opacity="0.4"/>
  <circle cx="${size*0.5}" cy="${size*0.25}" r="${size*0.11}" fill="none" stroke="white" stroke-width="${size*0.01}" opacity="0.2"/>
</svg>
`;

console.log('üé® Generating app icons...');

// Create assets directory if it doesn't exist
const assetsDir = path.join(__dirname, '..', 'assets');
if (!fs.existsSync(assetsDir)) {
  fs.mkdirSync(assetsDir, { recursive: true });
}

// Create icon generation info
const iconInfo = {
  generated: new Date().toISOString(),
  description: 'Vehicle Tracking App Icons - Generated by SuperClaude',
  theme: {
    primaryColor: '#2563eb',
    secondaryColor: '#1e40af',
    backgroundColor: 'white'
  },
  sizes: Object.keys(iconSizes).length
};

// Write icon info file
fs.writeFileSync(
  path.join(assetsDir, 'icon-info.json'),
  JSON.stringify(iconInfo, null, 2)
);

// Generate placeholder PNGs (in a real scenario, you'd use an image processing library)
Object.entries(iconSizes).forEach(([filename, size]) => {
  const svgContent = createVehicleIconSVG(size);
  const svgPath = path.join(assetsDir, filename.replace('.png', '.svg'));
  
  // Save SVG version for reference
  fs.writeFileSync(svgPath, svgContent);
  
  // Create a simple PNG placeholder (1x1 pixel, base64 encoded)
  const pngPlaceholder = Buffer.from(
    'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==',
    'base64'
  );
  
  fs.writeFileSync(path.join(assetsDir, filename), pngPlaceholder);
  console.log(`‚úÖ Generated ${filename} (${size}x${size})`);
});

console.log(`üéØ Generated ${Object.keys(iconSizes).length} icons in ${assetsDir}`);
console.log('üìù Note: These are placeholder icons. For production, replace with actual designed icons.');
console.log('üí° SVG templates are available for reference and can be converted to PNG using tools like:');
console.log('   - Online converters (svg2png, convertio)');
console.log('   - Command line tools (ImageMagick, Inkscape)');
console.log('   - Design tools (Figma, Sketch, Adobe Illustrator)');

// Create icon generation instructions
const instructions = `# Icon Generation Instructions

## Current Status
- ‚úÖ Placeholder icons generated
- ‚úÖ SVG templates created
- ‚ö†Ô∏è Production icons needed

## Next Steps

### 1. Design Production Icons
Use the SVG templates in assets/ as starting points:
- Edit with design tools (Figma, Sketch, Adobe Illustrator)
- Maintain the vehicle tracking theme
- Use brand colors: #2563eb (primary), #1e40af (secondary)

### 2. Convert SVG to PNG
Use online tools or command line:

**Online conversion:**
- svg2png.com
- convertio.co
- cloudconvert.com

**Command line (ImageMagick):**
\`\`\`bash
magick convert icon.svg -resize 1024x1024 icon.png
\`\`\`

**Command line (Inkscape):**
\`\`\`bash
inkscape icon.svg -w 1024 -h 1024 -o icon.png
\`\`\`

### 3. Replace Placeholders
Replace the generated PNG files with your designed icons while maintaining the same filenames.

### 4. App Store Requirements
- iOS: 1024x1024 px icon required for App Store
- Android: 512x512 px icon required for Google Play
- All icons should be PNG format
- No transparency for main app icon

### 5. Testing
Test icons across different devices and OS versions to ensure visibility and quality.
`;

fs.writeFileSync(path.join(assetsDir, 'ICON_README.md'), instructions);
console.log('üìñ Icon instructions saved to assets/ICON_README.md');